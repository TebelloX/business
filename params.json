{"name":"Business","tagline":"DateTime calculations in business hours","body":"# Business [![Build status][travis-image]][travis-url] [![Version][version-image]][version-url] [![PHP Version][php-version-image]][php-version-url]\r\n\r\n> DateTime calculations in business hours\r\n\r\n## Installation\r\n\r\n```bash\r\n$ composer require florianv/business\r\n```\r\n\r\n## Usage\r\n\r\nFirst you need to configure your business schedule:\r\n\r\n```php\r\nuse Business\\SpecialDay;\r\nuse Business\\Day;\r\nuse Business\\Days;\r\nuse Business\\Business;\r\n\r\n// Opening hours for each week day. If not specified, it is considered closed\r\n$days = [\r\n    // Standard days with fixed opening hours\r\n    new Day(Days::MONDAY, [['09:00', '13:00'], ['2pm', '5 PM']]),\r\n    new Day(Days::TUESDAY, [['9 AM', '5 PM']]),\r\n    new Day(Days::WEDNESDAY, [['10:00', '13:00'], ['14:00', '17:00']]),\r\n    new Day(Days::THURSDAY, [['10 AM', '5 PM']]),\r\n    \r\n    // Special day with dynamic opening hours depending on the date\r\n    new SpecialDay(Days::FRIDAY, function (\\DateTime $date) {\r\n        if ('2015-05-29' === $date->format('Y-m-d')) {\r\n            return [['9 AM', '12:00']];\r\n        }\r\n    \r\n        return [['9 AM', '5 PM']];\r\n    }),\r\n];\r\n\r\n// Optional holiday dates\r\n$holidays = [new \\DateTime('2015-01-01'), new \\DateTime('2015-01-02')];\r\n\r\n// Optional business timezone\r\n$timezone = new \\DateTimeZone('Europe/Paris');\r\n\r\n// Create a new Business instance\r\n$business = new Business($days, $holidays, $timezone);\r\n```\r\n\r\n### Methods\r\n\r\n##### within() - Tells if a date is within business hours\r\n\r\n```php\r\n$bool = $business->within(new \\DateTime('2015-05-11 10:00'));\r\n```\r\n\r\n##### timeline() - Returns a timeline of business dates\r\n\r\n```php\r\n$start = new \\DateTime('2015-05-11 10:00');\r\n$end = new \\DateTime('2015-05-14 10:00');\r\n$interval = new \\DateInterval('P1D');\r\n\r\n$dates = $business->timeline($start, $end, $interval);\r\n```\r\n\r\n##### closest() - Returns the closest business date from a given date\r\n\r\n```php\r\n// After that date (including it)\r\n$nextDate = $business->closest(new \\DateTime('2015-05-11 10:00'));\r\n\r\n// Before that date (including it)\r\n$lastDate = $business->closest(new \\DateTime('2015-05-11 10:00'), Business::CLOSEST_LAST);\r\n```\r\n\r\n### Serialization\r\n\r\nThe `Business` class can be serialized so it can be stored for later reuse:\r\n\r\n```php\r\n$serialized = serialize($business);\r\n$business = unserialize($serialized);\r\n```\r\n\r\nIf you use `SpecialDay` instances, you need to install the `jeremeamia/superclosure` library providing closure serialization:\r\n\r\n```bash\r\n$ composer require jeremeamia/superclosure\r\n```\r\n\r\n## License\r\n\r\n[MIT](https://github.com/florianv/business/blob/master/LICENSE)\r\n\r\n[travis-url]: https://travis-ci.org/florianv/business\r\n[travis-image]: http://img.shields.io/travis/florianv/business.svg?style=flat\r\n\r\n[version-url]: https://packagist.org/packages/florianv/business\r\n[version-image]: http://img.shields.io/packagist/v/florianv/business.svg?style=flat\r\n\r\n[php-version-url]: https://packagist.org/packages/florianv/business\r\n[php-version-image]: http://img.shields.io/badge/php-5.4+-ff69b4.svg\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}